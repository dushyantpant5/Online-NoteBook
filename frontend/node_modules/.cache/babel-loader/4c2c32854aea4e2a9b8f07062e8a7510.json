{"ast":null,"code":"var _jsxFileName = \"/Users/dushyantpant/Desktop/Personal Project/React Course/iNotes/frontend/src/context/notes/NotesState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport NotesContext from \"./notesContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotesState = props => {\n  _s();\n  const host = \"http://localhost:6000\";\n  const notesInitial = [];\n  const [notes, setnotes] = useState(notesInitial);\n\n  //Add a note\n  const addNote = (title, description, tag) => {\n    const note = {\n      _id: \"6359ee09417e27064a601b8f\",\n      user: \"634ef77ca9b1ec89a9045493\",\n      title: title,\n      description: description,\n      tag: tag,\n      date: \"2022-10-27T02:33:45.949Z\",\n      __v: 0\n    };\n    setnotes(notes.concat(note));\n  };\n  //Delete a note\n  const delNote = id => {\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setnotes(newNotes);\n  };\n  //Edit a note\n  const editNote = async (id, title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjM0ZWY3N2NhOWIxZWM4OWE5MDQ1NDkzIn0sImlhdCI6MTY2NjIwNzQzOX0.UPorDoQPsWVs4YrvL2ITKG7rTE5xdnjOv02Xmty8Fis\"\n      },\n      body: JSON.stringify(data)\n    });\n    const json = response.json();\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n      if (element._id === id) {\n        element.title = title;\n        element.description = description;\n        element.tag = tag;\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NotesContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      delNote,\n      editNote\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(NotesState, \"17KTT0fQ15Y6l1fhXF3AS0rkCqo=\");\n_c = NotesState;\nexport default NotesState;\nvar _c;\n$RefreshReg$(_c, \"NotesState\");","map":{"version":3,"names":["React","useState","NotesContext","NotesState","props","host","notesInitial","notes","setnotes","addNote","title","description","tag","note","_id","user","date","__v","concat","delNote","id","newNotes","filter","editNote","response","fetch","method","headers","body","JSON","stringify","data","json","index","length","element","children"],"sources":["/Users/dushyantpant/Desktop/Personal Project/React Course/iNotes/frontend/src/context/notes/NotesState.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport NotesContext from \"./notesContext\";\n\nconst NotesState = (props) => {\n  const host = \"http://localhost:6000\";\n  const notesInitial = [];\n\n  const [notes, setnotes] = useState(notesInitial);\n\n  //Add a note\n  const addNote = (title, description, tag) => {\n    const note = {\n      _id: \"6359ee09417e27064a601b8f\",\n      user: \"634ef77ca9b1ec89a9045493\",\n      title: title,\n      description: description,\n      tag: tag,\n      date: \"2022-10-27T02:33:45.949Z\",\n      __v: 0,\n    };\n    setnotes(notes.concat(note));\n  };\n  //Delete a note\n  const delNote = (id) => {\n    const newNotes = notes.filter((note) => {\n      return note._id !== id;\n    });\n    setnotes(newNotes);\n  };\n  //Edit a note\n  const editNote = async (id, title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\":\n          \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjM0ZWY3N2NhOWIxZWM4OWE5MDQ1NDkzIn0sImlhdCI6MTY2NjIwNzQzOX0.UPorDoQPsWVs4YrvL2ITKG7rTE5xdnjOv02Xmty8Fis\",\n      },\n      body: JSON.stringify(data),\n    });\n    const json = response.json();\n\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n      if (element._id === id) {\n        element.title = title;\n        element.description = description;\n        element.tag = tag;\n      }\n    }\n  };\n\n  return (\n    <NotesContext.Provider value={{ notes, addNote, delNote, editNote }}>\n      {props.children}\n    </NotesContext.Provider>\n  );\n};\n\nexport default NotesState;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,YAAY,MAAM,gBAAgB;AAAC;AAE1C,MAAMC,UAAU,GAAIC,KAAK,IAAK;EAAA;EAC5B,MAAMC,IAAI,GAAG,uBAAuB;EACpC,MAAMC,YAAY,GAAG,EAAE;EAEvB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAACK,YAAY,CAAC;;EAEhD;EACA,MAAMG,OAAO,GAAG,CAACC,KAAK,EAAEC,WAAW,EAAEC,GAAG,KAAK;IAC3C,MAAMC,IAAI,GAAG;MACXC,GAAG,EAAE,0BAA0B;MAC/BC,IAAI,EAAE,0BAA0B;MAChCL,KAAK,EAAEA,KAAK;MACZC,WAAW,EAAEA,WAAW;MACxBC,GAAG,EAAEA,GAAG;MACRI,IAAI,EAAE,0BAA0B;MAChCC,GAAG,EAAE;IACP,CAAC;IACDT,QAAQ,CAACD,KAAK,CAACW,MAAM,CAACL,IAAI,CAAC,CAAC;EAC9B,CAAC;EACD;EACA,MAAMM,OAAO,GAAIC,EAAE,IAAK;IACtB,MAAMC,QAAQ,GAAGd,KAAK,CAACe,MAAM,CAAET,IAAI,IAAK;MACtC,OAAOA,IAAI,CAACC,GAAG,KAAKM,EAAE;IACxB,CAAC,CAAC;IACFZ,QAAQ,CAACa,QAAQ,CAAC;EACpB,CAAC;EACD;EACA,MAAME,QAAQ,GAAG,OAAOH,EAAE,EAAEV,KAAK,EAAEC,WAAW,EAAEC,GAAG,KAAK;IACtD,MAAMY,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEpB,IAAK,yBAAwBe,EAAG,EAAC,EAAE;MACjEM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,YAAY,EACV;MACJ,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACC,IAAI;IAC3B,CAAC,CAAC;IACF,MAAMC,IAAI,GAAGR,QAAQ,CAACQ,IAAI,EAAE;IAE5B,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG1B,KAAK,CAAC2B,MAAM,EAAED,KAAK,EAAE,EAAE;MACjD,MAAME,OAAO,GAAG5B,KAAK,CAAC0B,KAAK,CAAC;MAC5B,IAAIE,OAAO,CAACrB,GAAG,KAAKM,EAAE,EAAE;QACtBe,OAAO,CAACzB,KAAK,GAAGA,KAAK;QACrByB,OAAO,CAACxB,WAAW,GAAGA,WAAW;QACjCwB,OAAO,CAACvB,GAAG,GAAGA,GAAG;MACnB;IACF;EACF,CAAC;EAED,oBACE,QAAC,YAAY,CAAC,QAAQ;IAAC,KAAK,EAAE;MAAEL,KAAK;MAAEE,OAAO;MAAEU,OAAO;MAAEI;IAAS,CAAE;IAAA,UACjEnB,KAAK,CAACgC;EAAQ;IAAA;IAAA;IAAA;EAAA,QACO;AAE5B,CAAC;AAAC,GAtDIjC,UAAU;AAAA,KAAVA,UAAU;AAwDhB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module"}