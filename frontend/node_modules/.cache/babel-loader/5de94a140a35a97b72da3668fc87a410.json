{"ast":null,"code":"var _jsxFileName = \"/Users/dushyantpant/Desktop/Personal Project/React Course/iNotes/frontend/src/context/notes/NotesState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport NotesContext from \"./notesContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotesState = props => {\n  _s();\n  const host = \"http://localhost:6000\";\n  const notesInitial = [];\n  const [notes, setnotes] = useState(notesInitial);\n\n  //Add a note\n  const addNote = (title, description, tag) => {\n    const note = {\n      \"_id\": \"6359ee09417e27064a601b8f\",\n      \"user\": \"634ef77ca9b1ec89a9045493\",\n      \"title\": title,\n      \"description\": description,\n      \"tag\": tag,\n      \"date\": \"2022-10-27T02:33:45.949Z\",\n      \"__v\": 0\n    };\n    setnotes(notes.concat(note));\n  };\n  //Delete a note\n  const delNote = id => {\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setnotes(newNotes);\n  };\n  //Edit a note\n  const editNote = async (id, title, description, tag) => {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    return response.json();\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n      if (element._id === id) {\n        element.title = title;\n        element.description = description;\n        element.tag = tag;\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NotesContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      delNote,\n      editNote\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(NotesState, \"17KTT0fQ15Y6l1fhXF3AS0rkCqo=\");\n_c = NotesState;\nexport default NotesState;\nvar _c;\n$RefreshReg$(_c, \"NotesState\");","map":{"version":3,"names":["React","useState","NotesContext","NotesState","props","host","notesInitial","notes","setnotes","addNote","title","description","tag","note","concat","delNote","id","newNotes","filter","_id","editNote","response","fetch","url","method","headers","body","JSON","stringify","data","json","index","length","element","children"],"sources":["/Users/dushyantpant/Desktop/Personal Project/React Course/iNotes/frontend/src/context/notes/NotesState.js"],"sourcesContent":["import React , {useState}from \"react\";\nimport NotesContext from \"./notesContext\";\n\nconst NotesState = (props) =>\n{\n    const host = \"http://localhost:6000\"\n    const notesInitial = []\n       \n    const [notes, setnotes] = useState(notesInitial)\n\n    //Add a note\n    const addNote = (title,description,tag) =>{\n      const note = {\n        \"_id\": \"6359ee09417e27064a601b8f\",\n        \"user\": \"634ef77ca9b1ec89a9045493\",\n        \"title\": title,\n        \"description\": description,\n        \"tag\": tag,\n        \"date\": \"2022-10-27T02:33:45.949Z\",\n        \"__v\": 0\n      };\n      setnotes(notes.concat(note));\n    }\n    //Delete a note\n    const delNote = (id) =>{\n      const newNotes =  notes.filter((note)=>{return note._id!==id});\n      setnotes(newNotes);\n    }\n    //Edit a note\n    const editNote = async (id,title,description,tag) =>{\n      \n      const response = await fetch(url, {\n        method: 'POST', \n        headers: {\n          'Content-Type': 'application/json'\n      \n        },\n      body: JSON.stringify(data) \n      });\n      return response.json(); \n      \n      \n      for (let index = 0; index < notes.length; index++) {\n        const element = notes[index]; \n        if(element._id===id)\n        {\n          element.title = title;\n          element.description = description;\n          element.tag = tag;\n        }\n      }\n    }\n\n    return (\n        <NotesContext.Provider value = {{notes,addNote,delNote,editNote}}>\n        {props.children}\n        </NotesContext.Provider>\n    )\n} \n\nexport default NotesState;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAM,OAAO;AACrC,OAAOC,YAAY,MAAM,gBAAgB;AAAC;AAE1C,MAAMC,UAAU,GAAIC,KAAK,IACzB;EAAA;EACI,MAAMC,IAAI,GAAG,uBAAuB;EACpC,MAAMC,YAAY,GAAG,EAAE;EAEvB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAACK,YAAY,CAAC;;EAEhD;EACA,MAAMG,OAAO,GAAG,CAACC,KAAK,EAACC,WAAW,EAACC,GAAG,KAAI;IACxC,MAAMC,IAAI,GAAG;MACX,KAAK,EAAE,0BAA0B;MACjC,MAAM,EAAE,0BAA0B;MAClC,OAAO,EAAEH,KAAK;MACd,aAAa,EAAEC,WAAW;MAC1B,KAAK,EAAEC,GAAG;MACV,MAAM,EAAE,0BAA0B;MAClC,KAAK,EAAE;IACT,CAAC;IACDJ,QAAQ,CAACD,KAAK,CAACO,MAAM,CAACD,IAAI,CAAC,CAAC;EAC9B,CAAC;EACD;EACA,MAAME,OAAO,GAAIC,EAAE,IAAI;IACrB,MAAMC,QAAQ,GAAIV,KAAK,CAACW,MAAM,CAAEL,IAAI,IAAG;MAAC,OAAOA,IAAI,CAACM,GAAG,KAAGH,EAAE;IAAA,CAAC,CAAC;IAC9DR,QAAQ,CAACS,QAAQ,CAAC;EACpB,CAAC;EACD;EACA,MAAMG,QAAQ,GAAG,OAAOJ,EAAE,EAACN,KAAK,EAACC,WAAW,EAACC,GAAG,KAAI;IAElD,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,EAAE;MAChCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAElB,CAAC;MACHC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACC,IAAI;IACzB,CAAC,CAAC;IACF,OAAOR,QAAQ,CAACS,IAAI,EAAE;IAGtB,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGxB,KAAK,CAACyB,MAAM,EAAED,KAAK,EAAE,EAAE;MACjD,MAAME,OAAO,GAAG1B,KAAK,CAACwB,KAAK,CAAC;MAC5B,IAAGE,OAAO,CAACd,GAAG,KAAGH,EAAE,EACnB;QACEiB,OAAO,CAACvB,KAAK,GAAGA,KAAK;QACrBuB,OAAO,CAACtB,WAAW,GAAGA,WAAW;QACjCsB,OAAO,CAACrB,GAAG,GAAGA,GAAG;MACnB;IACF;EACF,CAAC;EAED,oBACI,QAAC,YAAY,CAAC,QAAQ;IAAC,KAAK,EAAI;MAACL,KAAK;MAACE,OAAO;MAACM,OAAO;MAACK;IAAQ,CAAE;IAAA,UAChEhB,KAAK,CAAC8B;EAAQ;IAAA;IAAA;IAAA;EAAA,QACS;AAEhC,CAAC;AAAA,GAvDK/B,UAAU;AAAA,KAAVA,UAAU;AAyDhB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module"}